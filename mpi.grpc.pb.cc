// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mpi.proto

#include "mpi.pb.h"
#include "mpi.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mpis {

static const char* MPIService_method_names[] = {
  "/mpis.MPIService/ISendRequest",
};

std::unique_ptr< MPIService::Stub> MPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MPIService::Stub> stub(new MPIService::Stub(channel));
  return stub;
}

MPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ISendRequest_(MPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MPIService::Stub::ISendRequest(::grpc::ClientContext* context, const ::mpis::RequestContext& request, ::mpis::ReplyContext* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ISendRequest_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::mpis::ReplyContext>* MPIService::Stub::AsyncISendRequestRaw(::grpc::ClientContext* context, const ::mpis::RequestContext& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mpis::ReplyContext>::Create(channel_.get(), cq, rpcmethod_ISendRequest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mpis::ReplyContext>* MPIService::Stub::PrepareAsyncISendRequestRaw(::grpc::ClientContext* context, const ::mpis::RequestContext& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mpis::ReplyContext>::Create(channel_.get(), cq, rpcmethod_ISendRequest_, context, request, false);
}

MPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MPIService::Service, ::mpis::RequestContext, ::mpis::ReplyContext>(
          std::mem_fn(&MPIService::Service::ISendRequest), this)));
}

MPIService::Service::~Service() {
}

::grpc::Status MPIService::Service::ISendRequest(::grpc::ServerContext* context, const ::mpis::RequestContext* request, ::mpis::ReplyContext* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mpis

